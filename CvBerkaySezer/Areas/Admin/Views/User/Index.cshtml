@using CvBerkaySezer.Models
@model User
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="content-header">

    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">Kullanıcı Ayarları</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Admin</a></li>
                    <li class="breadcrumb-item active">Kullanıcı Ayarları</li>
                </ol>
            </div>
        </div>
        <div class="row">
            <!-- /.col -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header p-2">
                        <ul class="nav nav-pills">
                            <li class="nav-item"><a class="nav-link active" href="#settings" data-toggle="tab">Bilgileri Düzenle</a></li>
                        </ul>
                    </div><!-- /.card-header -->
                    <div class="card-body">
                        <div class="tab-content">
                            <div class="tab-pane active" id="settings">
                                @using (Html.BeginForm("Index", "User", FormMethod.Post, new { @class = "form-horizontal" }))
                                {
                                    <div class="form-group row">
                                        @Html.LabelFor(x => x.FullName, "Ad Soyad", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-10">
                                            @Html.TextBoxFor(x => x.FullName, "", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(x => x.FullName, "", new { @class = "small", @style = "color:red;" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(x => x.UserName, "Kullanıcı Adı", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-10">
                                            @Html.TextBoxFor(x => x.UserName, "", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(x => x.UserName, "", new { @class = "small", @style = "color:red;" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(x => x.Password, "Şifre", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-10">
                                            @Html.TextBoxFor(x => x.Password, "", new { @class = "form-control", type = "password" })
                                            @Html.ValidationMessageFor(x => x.Password, "", new { @class = "small", @style = "color:red;" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="offset-sm-2 col-sm-10">
                                            <button type="submit" class="btn btn-primary">Kaydet</button>
                                        </div>
                                    </div>
                                }
                            </div>
                            <!-- /.tab-pane -->
                        </div>
                        <!-- /.tab-content -->
                    </div><!-- /.card-body -->
                </div>
                <!-- /.nav-tabs-custom -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</div>

@if (TempData["UserMessage"] != null)
{
    <script>
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({
                icon: '@TempData["UserType"]',
                title: '@TempData["UserMessage"]'
            })
    </script>
}